# TODO(billy): this workflow has not been re-named from `acceptance` because
# Visual Snapshots compares against artifacts from the same workflow name (on main branch)
# We should rename this when we have a more finalized naming scheme.
#
# Also note that this name *MUST* match the filename because GHA
# only provides the workflow name (https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables)
# and GH APIs only support querying by workflow *FILENAME* (https://developer.github.com/v3/actions/workflows/#get-a-workflow)
name: acceptance
on:
  push:
    branches:
      - master
      - releases/**
  pull_request:

jobs:
  ensure_docker:
    name: ensure docker image
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - name: Checkout sentry
        uses: actions/checkout@v2

      - name: Install gcloud utils
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '281.0.0'
          export_default_credentials: true
          service_account_key: ${{ secrets.GCR_SERVICE_ACCOUNT }}

      - name: Ensure docker image
        uses: ./.github/actions/ensure-docker

  frontend:
    name: frontend tests
    needs: [ensure_docker]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      matrix:
        instance: [0]

    env:
      VISUAL_HTML_ENABLE: 1

    steps:
      - name: Checkout sentry
        uses: actions/checkout@v2
        with:
          # Avoid codecov error message related to SHA resolution:
          # https://github.com/codecov/codecov-bash/blob/7100762afbc822b91806a6574658129fe0d23a7d/codecov#L891
          fetch-depth: '2'

      - name: Install gcloud utils
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '281.0.0'
          export_default_credentials: true
          service_account_key: ${{ secrets.GCR_SERVICE_ACCOUNT }}

      - name: Setup Sentry
        uses: ./.github/actions/setup-sentry-docker
        with:
          devservices: false

      - name: Run tests
        run: |
          docker exec \
            -e CI_NODE_TOTAL=${{ strategy.job-total }} \
            -e CI_NODE_INDEX=${{ matrix.instance }} \
            sentry-test bin/test-utils/run_tests make ci-test-js

      - name: Save HTML artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jest-html
          path: .artifacts/visual-snapshots/jest

      - name: Get CSS filename
        id: css-manifest
        run: echo "::set-output name=sentrycss::$(docker exec sentry-test jq -r '.["sentry.css"]' src/sentry/static/sentry/dist/manifest.json)"

      - name: Create Images from HTML
        uses: getsentry/action-html-to-image@main
        with:
          base-path: .artifacts/visual-snapshots/jest
          css-path: ./src/sentry/static/sentry/dist/${{ steps.css-manifest.outputs.sentrycss }}

      - name: Save snapshots
        if: always()
        uses: getsentry/action-visual-snapshot@v2
        with:
          save-only: true
          snapshot-path: .artifacts/visual-snapshots

      - name: Handle artifacts
        uses: ./.github/actions/artifacts

  acceptance:
    name: acceptance
    if: false == true
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs: [ensure_docker]

    strategy:
      matrix:
        instance: [0, 1, 2, 3]

    env:
      VISUAL_SNAPSHOT_ENABLE: 1
      TEST_GROUP_STRATEGY: roundrobin

    steps:
      - name: Checkout sentry
        uses: actions/checkout@v2


      - name: Install gcloud utils
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '281.0.0'
          export_default_credentials: true
          service_account_key: ${{ secrets.GCR_SERVICE_ACCOUNT }}

      - name: Setup Sentry
        uses: ./.github/actions/setup-sentry-docker
        with:
          snuba: true

      - name: Run tests
        id: test
        run: |
          mkdir -p .artifacts/visual-snapshots/acceptance
          mkdir -p .artifacts/visual-snapshots/acceptance-mobile
          mkdir -p .artifacts/visual-snapshots/acceptance-tooltips
          docker exec -e TEST_GROUP_STRATEGY=individual sentry-test bin/test-utils/run_tests make ci-test-acceptance

      - name: Save artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: acceptance
          path: .artifacts

      - name: Save snapshots
        if: always()
        uses: getsentry/action-visual-snapshot@v2
        with:
          save-only: true
          snapshot-path: .artifacts/visual-snapshots

      - name: Handle artifacts
        uses: ./.github/actions/artifacts

  chartcuterie:
    name: chartcuterie integration
    if: false == true
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      matrix:
        instance: [0]
    env:
      VISUAL_SNAPSHOT_ENABLE: 1

    steps:
      - uses: actions/checkout@v2
        with:
          # Avoid codecov error message related to SHA resolution:
          # https://github.com/codecov/codecov-bash/blob/7100762afbc822b91806a6574658129fe0d23a7d/codecov#L891
          fetch-depth: '2'

      - name: Set python version output
        id: python-version
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"

      # Until GH composite actions can use `uses`, we need to setup python here
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Setup pip
        uses: ./.github/actions/setup-pip
        id: pip

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip.outputs.pip-cache-dir }}
          key: |
            ${{ runner.os }}-py${{ steps.python-version.outputs.python-version }}-pip${{ steps.pip.outputs.pip-version }}-${{ secrets.PIP_CACHE_VERSION }}-${{ hashFiles('requirements-*.txt', '!requirements-pre-commit.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ steps.python-version.outputs.python-version }}-pip${{ steps.pip.outputs.pip-version }}-${{ secrets.PIP_CACHE_VERSION }}

      - name: Setup sentry env
        uses: ./.github/actions/setup-sentry
        id: setup
        with:
          chartcuterie: true

      - name: yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.setup.outputs.yarn-cache-dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock', 'api-docs/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Javascript Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Build chartcuterie configuration module
        run: |
          make build-chartcuterie-config

      - name: Run chartcuterie tests (${{ steps.setup.outputs.matrix-instance-number }} of ${{ strategy.job-total }})
        run: |
          mkdir -p ${{ steps.setup.outputs.acceptance-dir }}
          make test-chartcuterie
        env:
          PYTEST_SNAPSHOTS_DIR: ${{ steps.setup.outputs.acceptance-dir }}

      - name: Save snapshots
        if: always()
        uses: getsentry/action-visual-snapshot@v2
        with:
          save-only: true
          snapshot-path: .artifacts/visual-snapshots

      - name: Handle artifacts
        uses: ./.github/actions/artifacts
